german_food <- rename(german_food, c("food.Please.rate.how.much.you.like.the.traditional.cuisine.of.Germany."="Interest", "food.Household.Income","Income"))
library(tidyr)
library(plyr)
food <- read.csv("food-world-cup-data.csv",
stringsAsFactors = FALSE,
fileEncoding="latin1",
na.strings = "N/A")
german_food <- data.frame(food$Please.rate.how.much.you.like.the.traditional.cuisine.of.Germany., food$Household.Income)
german_food$food.Please.rate.how.much.you.like.the.traditional.cuisine.of.Germany. <- mapvalues(german_food$food.Please.rate.how.much.you.like.the.traditional.cuisine.of.Germany., from = c(1,2,3,4,5,NA),
to = c("Dislike","Dislike","Dislike","Like","Like","Dislike"))
german_food$food.Household.Income <- mapvalues(german_food$food.Household.Income, from = c("$0 - $24,999", "$25,000 - $49,999", "$50,000 - $99,999","$100,000 - $149,999","$150,000+"), to = c("Low Income","Low Income","High Income", "High Income", "High Income"))
german_food <- rename(german_food, c("food.Please.rate.how.much.you.like.the.traditional.cuisine.of.Germany."="Interest", "food.Household.Income"="Income"))
table(german_food)
subset(german_food, Income == "Low Income")
x <- c(.35, .41)
hist(x)
?hist
barplot(x)
?barplot
barplot(x, height = 1)
barplot(x)
?barplot
barplot(x, names.arg = c("Low Income", "High Income"))
barplot(x, names.arg = c("Low Income", "High Income"), ylab = "Proportion that Like German Food")
x <- c(.35344828, .41254125)
barplot(x, names.arg = c("Low Income", "High Income"), ylab = "Proportion that Like German Food")
x <- c(.35344828, .41254125)
barplot(x, names.arg = c("Low Income", "High Income"), ylab = "Proportion that Like German Food")
x <- c(.35344828, .41254125)
barplot(x, names.arg = c("Low Income", "High Income"), ylab = "Proportion that Like German Food")
table(subset(german_food, Income != ""))
inference(german_food$Interest, est = "proportion", type = "ci", method = "theoretical")
library('IS606')
inference(german_food$Interest, est = "proportion", type = "ci", method = "theoretical")
?infer
load("/Users/christopherfenton/Data Science/Fall 2015/IS 606 Stats and Probability/Lab6/more/atheism.RData")
source("http://stat.duke.edu/courses/Fall12/sta101.001/labs/inference.R")
source("inference.R")
inference(german_food$Interest, est = "proportion", type = "ci", method = "theoretical")
load("/Users/christopherfenton/Data Science/Fall 2015/IS 606 Stats and Probability/Lab5/more/nc.RData")
inference(german_food$Interest, est = "proportion", type = "ci", method = "theoretical")
inference(german_food$Interest, est = "proportion", type = "ci", method = "theoretical", success = "Like")
str(german_food)
german_food_income_reported <- subset(german_food, Income != "")
inference(german_food_income_reported$Interest, est = "proportion", type = "ci", method = "theoretical", success = "Like")
library(jsonlite)
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=jones")
school_math2 <- unlist(school_math[3])
school_math2 <- school_math[3]
school_math2 <- school_math[[3]]
school_math2 <- school_math[3][3]
school_math2 <- school_math[3]
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search_sql?sql=SELECT
* from \"b4e7f148-3afc-4782-84a3-dfaca3156e8b\" WHERE title LIKE 'jones'")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search_sql?sql=SELECT
* from \"b4e7f148-3afc-4782-84a3-dfaca3156e8b\" WHERE leanm11 LIKE 'jones'")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search_sql?sql=SELECT
* from \"b4e7f148-3afc-4782-84a3-dfaca3156e8b\" WHERE \"leanm11\" LIKE 'jones'")
json_try <- fromJSON("https://inventory.data.gov/api/action/datastore_search?
resource_id=1705fe89-ffc3-420d-a385-f365f75fa7eb&filters={%22Status%22:%22Active%22}")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?
resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=jones")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=jones")
json_try <- fromJSON("https://inventory.data.gov/api/action/datastore_search?resource_id=1705fe89-ffc3-420d-a385-f365f75fa7eb&filters={%22Status%22:%22Active%22}")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=jones&filters={%22Status%22:%22Active%22}")
install.packages("ckanr")
library('ckanr')
ckanr_setup(url = "https://inventory.data.gov/")
package_search(rows = 1)
ckanr_setup()
package_show('34d60b13-1fd5-430e-b0ec-c8bc7f4841cf)
package_show('34d60b13-1fd5-430e-b0ec-c8bc7f4841cf')
ckanr_setup(url = "https://inventory.data.gov")
package_show('89fec729-9ab9-43d5-8dcd-e65dfab2a17c')
?\package_show
?package_show
package_show('89fec729-9ab9-43d5-8dcd-e65dfab2a17c', as='JSON')
?package_create
package_create('school')
update.packages('jsonlite')
package_create('school')
package_list()
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=jones&filters={\"Status\":\"Active\"}")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=filters={\"STNAM\":\"ALABAMA\"}")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=filters={\"STNAM\":\"ALABAMA\"}")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=filters={\"STNAM\":\"ALABAMA\"}")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=filters={\"stnam\":\"ALABAMA\"}")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=STNAM:ALABAMA")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=STNAM:'ALABAMA'")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=STNAM:ALABAMA")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?q=hello&size=5")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?q=hello")
library(jsonlite)
library(httr)
req <- POST('https://inventory.data.gov/api/action/datastore_search'
)
req <- POST('https://inventory.data.gov/api/action/datastore_search',
body = '{ "query": [], "response": { "format": "json" } }'
)
?POST
?stop_for_status
?POST
req <- POST('https://inventory.data.gov/api/action/datastore_search?',
body = '{ "query": [], "response": { "format": "json" } }'
)
req <- POST('https://inventory.data.gov/api/action/datastore_search?source=',
body = '{ "query": [], "response": { "format": "json" } }'
)
fromJSON
?fromJSON
req <- POST('https://inventory.data.gov/api/action/datastore_search'
)
req <- POST('https://inventory.data.gov/api/action/datastore_search',
body = "{
resource_id: 'b4e7f148-3afc-4782-84a3-dfaca3156e8b',
limit: 5,
q: 'jones'
}"
)
req <- POST('https://inventory.data.gov/api/action/datastore_search?',
body = "{
resource_id: 'b4e7f148-3afc-4782-84a3-dfaca3156e8b',
limit: 5,
q: 'jones'
}"
)
?POST
req <- POST('https://inventory.data.gov/api/action/datastore_search?',
body = "{
resource_id: 'b4e7f148-3afc-4782-84a3-dfaca3156e8b',
limit: 5,
q: 'jones'
}",
multipart = FALSE
)
req <- POST('https://inventory.data.gov/api/action/datastore_search?',
body = "{
resource_id: 'b4e7f148-3afc-4782-84a3-dfaca3156e8b',
limit: 5,
q: 'jones'
}",
encode = 'json'
req <- POST('https://inventory.data.gov/api/action/datastore_search?',
body = "{
resource_id: 'b4e7f148-3afc-4782-84a3-dfaca3156e8b',
limit: 5,
q: 'jones'
}",
encode = 'json'
)
req <- POST('https://inventory.data.gov/api/action/datastore_search?',
body = "{
resource_id: 'b4e7f148-3afc-4782-84a3-dfaca3156e8b',
limit: 5,
q: 'jones'
}",
encode = 'json'
)
req <- POST('https://inventory.data.gov/api/action/datastore_search',
body = "{
resource_id: 'b4e7f148-3afc-4782-84a3-dfaca3156e8b',
limit: 5,
q: 'jones'
}",
encode = 'json'
)
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?q=hello")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?q=NEW YORK")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?q=NEW_YORK")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?q=NEWYORK")
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?q=NEWYORK")
req <- POST('https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=jones',
)
req <- POST("https://inventory.data.gov/api/action/datastore_search_sql?sql=SELECT * from \"b4e7f148-3afc-4782-84a3-dfaca3156e8b\" WHERE title LIKE 'jones'")
req <- POST("https://inventory.data.gov/api/action/datastore_search_sql?sql=SELECT * from \"b4e7f148-3afc-4782-84a3-dfaca3156e8b\" WHERE leanm11 LIKE 'jones'")
req <- POST("https://inventory.data.gov/api/action/datastore_search_sql?sql=SELECT * from 'b4e7f148-3afc-4782-84a3-dfaca3156e8b' WHERE leanm11 LIKE 'jones'")
req <- POST("https://inventory.data.gov/api/action/datastore_search_sql?sql=SELECT * from 'b4e7f148-3afc-4782-84a3-dfaca3156e8b' WHERE 'leanm11' LIKE 'jones'")
req <- POST("https://inventory.data.gov/api/action/datastore_search_sql?sql=SELECT * from 'b4e7f148-3afc-4782-84a3-dfaca3156e8b' WHERE 'leanm11' LIKE 'jones'")
req <- POST("https://inventory.data.gov/api/action/datastore_search_sql?sql=SELECT * from 'b4e7f148-3afc-4782-84a3-dfaca3156e8b' WHERE 'leanm11' LIKE 'jones'")
req <- POST("https://inventory.data.gov/api/action/datastore_search_sql?sql=SELECT * from 'b4e7f148-3afc-4782-84a3-dfaca3156e8b' WHERE 'leanm11' LIKE 'jones'")
req <- POST("https://inventory.data.gov/api/action/datastore_search_sql?api_key=W7KRCyAf29uIuiklIvJaSgJliE6GrRpR01ObMUh6&sql=SELECT * from 'b4e7f148-3afc-4782-84a3-dfaca3156e8b' WHERE 'leanm11' LIKE 'jones'")
'https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=buffalo'
school_math <- fromJSON("https://inventory.data.gov/api/action/datastore_search?q=buffalo")
school_math <- fromJSON('https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=buffalo')
school_math <- fromJSON('https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=buffalo+city+school')
school_math <- fromJSON('https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=buffalo+city+school')
buffalo_math <- fromJSON('https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=buffalo+city+school')
str(buffalo_math)
buffalo_math[3]
bm <- buffalo_math[3]
bm <- buffalo_math[[3]]
bm <- buffalo_math[[3]][4]
bm <- unlist(buffalo_math[[3]][4])
bm <- buffalo_math[[3]]
str(bm[4])
str(as.data.frame(bm[4]))
library(RCurl)
url <- getURL('https://nces.ed.gov/programs/stateprofiles/sresult.asp?mode=short&s1=05')
getURLContent()
alabama <- getURLContent(url)
str(url)
url
library(XML)
bama <- htmlParse(url)
str(bama)
htmlParse(url)
readHTMLTable(url)
bama <- readHTMLTable(url)
str(bama)
?readHTMLTable
bama[1]
bama[[2]]
url <- getURL('https://nces.ed.gov/programs/stateprofiles/sresult.asp?mode=full&displaycat=7&s1=05')
bama <- readHTMLTable(url)
bama[[2]]
bama[[9]]
str(bama[[9]])
bama[[9]]
albama_stats <- alabama[[9]]
url <- getURL('https://nces.ed.gov/programs/stateprofiles/sresult.asp?mode=full&displaycat=7&s1=05')
alabama <- readHTMLTable(url)
alabama_stats <- alabama[[9]]
alabama <- readHTMLTable(url, stringsAsFactors = FALSE)
alabama_stats <- alabama[[9]]
setwd("~/Data Science/Fall 2015/IS 607 Data Acquisition and Management/Final Project")
fed_data <- read.table('elsex11.xls', stringsAsFactors = FALSE)
fed_data <- read.table('elsec11.xls', stringsAsFactors = FALSE)
fed_data <- read.csv('elsec11.csv', stringsAsFactors = FALSE)
fed_data <- read.csv('https://github.com/cjf4/IS-607-Data-Acquisition-and-Management/blob/master/Final%20Project/elsec11.csv', stringsAsFactors = FALSE)
fed_data <- read.csv('https://raw.githubusercontent.com/cjf4/IS-607-Data-Acquisition-and-Management/master/Final%20Project/elsec11.csv', stringsAsFactors = FALSE)
buffalo_math <- fromJSON('https://inventory.data.gov/api/action/datastore_search?resource_id=b4e7f148-3afc-4782-84a3-dfaca3156e8b&q=buffalo+city+school')
req <- POST("https://inventory.data.gov/api/action/datastore_search_sql?api_key=W7KRCyAf29uIuiklIvJaSgJliE6GrRpR01ObMUh6&sql=SELECT * from 'b4e7f148-3afc-4782-84a3-dfaca3156e8b' WHERE 'leanm11' LIKE 'jones'")
Suspicious, I used the SQL example (https://inventory.data.gov/api/action/datastore_search_sql?sql=SELECT * from "89fec729-9ab9-43d5-8dcd-e65dfab2a17c" WHERE title LIKE 'jones') mentioned in [the API page](https://inventory.data.gov/api/1/util/snippet/api_info.html?resource_id=89fec729-9ab9-43d5-8dcd-e65dfab2a17c&datastore_root_url=https%3A%2F%2Finventory.data.gov%2Fapi%2Faction), which also resulted in a 409 error. It was at that point that I decided that the API was not reliable enough for me to work with, even if it (likely) included some
str(alabama_stats)
head(alabama_stats)
str(alabama_stats)
head(alabama_stats)
url1 <- getURL('https://nces.ed.gov/programs/stateprofiles/sresult.asp?mode=full&displaycat=7&s1=10')
state1 <- readHTMLTable(url1, stringsAsFactors = FALSE)
state1 <- state1[[9]]
head(state1)
rep(1:50)
as.character(rep(1:50))
state_ids <- as.character(rep(1:55))
length(state_ids[1])
paste0("0", "1")
?paste0
state_ids <- lapply(state_ids, function(x) {if (length(x) < 2) paste0("0", x)})
state_ids
state_ids <- as.character(rep(1:55))
state_ids <- unlist(lapply(state_ids, function(x) {if (length(x) < 2) paste0("0", x)}))
state_ids
state_ids <- as.character(rep(1:55))
length(state_ids[15])
state_ids <- unlist(lapply(state_ids, function(x) {if (nchar(x) < 2) paste0("0", x)}))
state_ids
state_ids <- as.character(rep(1:55))
state_ids <- unlist(lapply(state_ids, function(x) if(nchar(x) < 2) paste0("0", x) else x ))
state_ids
head(state`)
head(state1)
str(state1)
str(colnames(state1))
arkansas <- readHTMLTable('https://nces.ed.gov/programs/stateprofiles/sresult.asp?mode=full&displaycat=7&s1=05')
arkansas[[9]]
state_ids <- as.character(rep(1:55))
state_ids <- unlist(lapply(state_ids, function(x) if(nchar(x) < 2) paste0("0", x) else x ))
#base url
url <- 'https://nces.ed.gov/programs/stateprofiles/sresult.asp?mode=full&displaycat=7&s1='
#function to go through above vector and download all the state data
per_data_dl <- function(state_id) {
state_uri <- getURL(paste0(url, state_id))
state_table <- readHTMLTable(state_uri, stringsAsFactors = FALSE)
state_df <- state_table[[9]]
return(state_df)
}
test1 <- per_data_dl("01")
cnv <- colnames(test1)
cnv[3]
colnames(test1)[3]
data_extract <- function(df) {
colnames(df)[3]
}
data_extract(test1)
test1
test1[3,6]
test1[6,3]
test1[7,3]
test1[8,3]
test1[9,3]
atest1[9,3]
as.integer(test9,3)
as.integer(test1[9,3])
data_extract(test1)
data_extract <- function(df) {
state_name <- colnames(df)[3]
math_scale <- as.integer(df[6,3])
math_basic <- as.integer(df[7,3])
math_pro <- as.integer(df[8,3])
math_adv <- as.integer(df[9,3])
return(c(state_name, math_scale, math_basic, math_pro, math_adv))
}
data_extract(test1)
?list
data_extract <- function(df) {
state_name <- colnames(df)[3]
math_scale <- as.integer(df[6,3])
math_basic <- as.integer(df[7,3])
math_pro <- as.integer(df[8,3])
math_adv <- as.integer(df[9,3])
return(list(state_name, math_scale, math_basic, math_pro, math_adv))
}
data_extract(test1)
head(test1)
str(test1[2,])
data_extract <- function(df) {
state_name <- colnames(df)[3]
math_scale <- as.integer(df[6,3])
math_basic <- as.integer(df[7,3])
math_pro <- as.integer(df[8,3])
math_adv <- as.integer(df[9,3])
return(data.frame(state_name, math_scale, math_basic, math_pro, math_adv))
}
data_extract(test1)
df_list <- unlist(lapply(state_ids, per_data_dl))
df_list <- lapply(state_ids, per_data_dl)
extracted <- lapply(df_list, data_extract)
as.data.frame(extracted)
unlist(extracted)
library(plyr)
library(dplyr)
?ldply
df <- ldply(extracted, data.frame)
df
head(math_data)
?filter
?group_by
finance_sum <- group_by(fed_data)
finance_sum <- group_by(fed_data, IDCENSUS)
finance_sum <- group_by(fed_data, STATE)
?dcast()
library(reshape2)
?ddcast
?dcast
finance_sum <- group_by(fed_data, STATE)
sum2 <- summarise(finance_sum, sum_rev = sum(TOTALREV))
sum2
tail(ssum())
tail(sum2)
head(df)
df$state_name
state_key <- read.csv('https://raw.githubusercontent.com/cjf4/IS-607-Data-Acquisition-and-Management/master/Final%20Project/state_key.csv', stringsAsFactors = FALSE)
?merge
merged_data <- merge(sum2, state_key, by.x = "STATE", by.y = "state_id")
merged_data
school_finance_per <- merge(merged_data, df, by = "state_name")
school_finance_per
merged_data
df
state_ids <- as.character(rep(1:56))
state_ids <- unlist(lapply(state_ids, function(x) if(nchar(x) < 2) paste0("0", x) else x ))
#base url
url <- 'https://nces.ed.gov/programs/stateprofiles/sresult.asp?mode=full&displaycat=7&s1='
#function to go through above vector and download all the state data
#takes one two digit character code (01-55) as argument
per_data_dl <- function(state_id) {
state_uri <- getURL(paste0(url, state_id))
state_table <- readHTMLTable(state_uri, stringsAsFactors = FALSE)
state_df <- state_table[[9]]
return(state_df)
}
#function to extract correct data from downloaded data frame
data_extract <- function(df) {
state_name <- colnames(df)[3]
math_scale <- as.integer(df[6,3])
math_basic <- as.integer(df[7,3])
math_pro <- as.integer(df[8,3])
math_adv <- as.integer(df[9,3])
return(data.frame(state_name, math_scale, math_basic, math_pro, math_adv))
}
df_List <- lapply(state_ids, per_data_dl)
#building 01-55 character vector for url query
state_ids <- as.character(rep(1:56))
state_ids <- unlist(lapply(state_ids, function(x) if(nchar(x) < 2) paste0("0", x) else x ))
#base url
url <- 'https://nces.ed.gov/programs/stateprofiles/sresult.asp?mode=full&displaycat=7&s1='
#function to go through above vector and download all the state data
#takes one two digit character code (01-55) as argument
per_data_dl <- function(state_id) {
state_uri <- getURL(paste0(url, state_id))
state_table <- readHTMLTable(state_uri, stringsAsFactors = FALSE)
state_df <- state_table[[9]]
return(state_df)
}
#function to extract correct data from downloaded data frame
data_extract <- function(df) {
state_name <- colnames(df)[3]
math_scale <- as.integer(df[6,3])
math_basic <- as.integer(df[7,3])
math_pro <- as.integer(df[8,3])
math_adv <- as.integer(df[9,3])
return(data.frame(state_name, math_scale, math_basic, math_pro, math_adv))
}
df_List <- lapply(state_ids, per_data_dl)
extracted <- lapply(df_list, data_extract)
math_data <- ldply(extracted, data.frame)
###Finance Data
fed_data <- read.csv('https://raw.githubusercontent.com/cjf4/IS-607-Data-Acquisition-and-Management/master/Final%20Project/elsec11.csv', stringsAsFactors = FALSE)
#sum pivot
finance_sum <- group_by(fed_data, STATE)
summed_fin <- summarise(finance_sum, sum_rev = sum(TOTALREV), sum_exp = sum(TOTALEXP), total_enroll = sum(V33))
#read in state key
state_key <- read.csv('https://raw.githubusercontent.com/cjf4/IS-607-Data-Acquisition-and-Management/master/Final%20Project/state_key.csv', stringsAsFactors = FALSE)
#attach state name to summarized data
school_finance_per <- merge(summed_fin, state_key, by.x = "STATE", by.y = "state_id")
#attach sum data to performance data
school_finance_per <- merge(school_finance_per, math_data, by = "state_name")
school_finance_per
math_data
df_list
wy <- per_data_dl("56")
state_ids
state_ids <- as.character(rep(1:56))
state_ids <- unlist(lapply(state_ids, function(x) if(nchar(x) < 2) paste0("0", x) else x ))
#base url
url <- 'https://nces.ed.gov/programs/stateprofiles/sresult.asp?mode=full&displaycat=7&s1='
#function to go through above vector and download all the state data
#takes one two digit character code (01-55) as argument
per_data_dl <- function(state_id) {
state_uri <- getURL(paste0(url, state_id))
state_table <- readHTMLTable(state_uri, stringsAsFactors = FALSE)
state_df <- state_table[[9]]
return(state_df)
}
#function to extract correct data from downloaded data frame
data_extract <- function(df) {
state_name <- colnames(df)[3]
math_scale <- as.integer(df[6,3])
math_basic <- as.integer(df[7,3])
math_pro <- as.integer(df[8,3])
math_adv <- as.integer(df[9,3])
return(data.frame(state_name, math_scale, math_basic, math_pro, math_adv))
}
df_List <- lapply(state_ids, per_data_dl)
extracted <- lapply(df_list, data_extract)
math_data <- ldply(extracted, data.frame)
###Finance Data
fed_data <- read.csv('https://raw.githubusercontent.com/cjf4/IS-607-Data-Acquisition-and-Management/master/Final%20Project/elsec11.csv', stringsAsFactors = FALSE)
#sum pivot
finance_sum <- group_by(fed_data, STATE)
summed_fin <- summarise(finance_sum, sum_rev = sum(TOTALREV), sum_exp = sum(TOTALEXP), total_enroll = sum(V33))
#read in state key
state_key <- read.csv('https://raw.githubusercontent.com/cjf4/IS-607-Data-Acquisition-and-Management/master/Final%20Project/state_key.csv', stringsAsFactors = FALSE)
#attach state name to summarized data
school_finance_per <- merge(summed_fin, state_key, by.x = "STATE", by.y = "state_id")
#attach sum data to performance data
school_finance_per <- merge(school_finance_per, math_data, by = "state_name")
extracted <- lapply(df_List, data_extract)
math_data <- ldply(extracted, data.frame)
###Finance Data
fed_data <- read.csv('https://raw.githubusercontent.com/cjf4/IS-607-Data-Acquisition-and-Management/master/Final%20Project/elsec11.csv', stringsAsFactors = FALSE)
#sum pivot
finance_sum <- group_by(fed_data, STATE)
summed_fin <- summarise(finance_sum, sum_rev = sum(TOTALREV), sum_exp = sum(TOTALEXP), total_enroll = sum(V33))
#read in state key
state_key <- read.csv('https://raw.githubusercontent.com/cjf4/IS-607-Data-Acquisition-and-Management/master/Final%20Project/state_key.csv', stringsAsFactors = FALSE)
#attach state name to summarized data
school_finance_per <- merge(summed_fin, state_key, by.x = "STATE", by.y = "state_id")
#attach sum data to performance data
school_finance_per <- merge(school_finance_per, math_data, by = "state_name")
school_finance_per
school_finance_per$exp_per_pup <- school_finance_per$sum_exp / school_finance_per$total_enroll
?getURL
head(per_data_dl())
school_finance_per$rev_per_pup <  school_finance_per$sum_rev / school_finance_per$total_enroll
school_finance_per$rev_per_pup <- school_finance_per$sum_rev / school_finance_per$total_enroll
subset(school_finance_per, exp_per_pup > rev_per_pup)
length(subset(school_finance_per, exp_per_pup > rev_per_pup))
sum(subset(school_finance_per, exp_per_pup > rev_per_pup))
str(subset(school_finance_per, exp_per_pup > rev_per_pup))
?order_by
?order
top_spenders <- school_finance_per[order(exp_per_pup, decreasing = TRUE),]
top_spenders <- school_finance_per[order(school_finance_per$exp_per_pup, decreasing = TRUE),]
head(top_spenders)
plot(school_finance_per$exp_per_pup, school_finance_per$math_basic)
?plot
plot(school_finance_per$exp_per_pup, school_finance_per$math_basic, xlab = "Expenditure per pupil", ylab = "Basic Math Profiency Percentage")
?plot
par(col.lab="blue")
plot(school_finance_per$exp_per_pup, school_finance_per$math_basic, xlab = "Expenditure per pupil", ylab = "Basic Math Profiency Percentage")
?parse_formula
?par()
col("blue")
par(col="green")
plot(school_finance_per$exp_per_pup, school_finance_per$math_basic, xlab = "Expenditure per pupil", ylab = "Basic Math Profiency Percentage")
par(col="red")
plot(school_finance_per$exp_per_pup, school_finance_per$math_basic, xlab = "Expenditure per pupil", ylab = "Basic Math Profiency Percentage")
basic_math.lm <- lm(math_basic ~ exp_per_pup, school_finance_per)
summary(basic_math.lm)
basic_math.lm <- lm(exp_per_pup ~ math_basic, school_finance_per)
summary(basic_math.lm)
basic_math.lm <- lm(math_basic ~ exp_per_pup, school_finance_per)
summary(basic_math.lm)
schools_no_DC <- subset(school_finance_per, state_name != "Washington DC")
schools_no_DC <- subset(school_finance_per, math_basic > 50)
schools_no_DC <- subset(school_finance_per, math_basic > 50)
basic_math.lm <- lm(math_basic ~ exp_per_pup, school_finance_per)
summary(basic_math.lm)
schools_no_DC <- subset(school_finance_per, math_basic > 50)
basic_math.lm <- lm(math_basic ~ exp_per_pup, schools_no_DC)
summary(basic_math.lm)
